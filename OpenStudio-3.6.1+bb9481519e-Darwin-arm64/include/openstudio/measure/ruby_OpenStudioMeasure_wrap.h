/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_OpenStudio__Measure_WRAP_H_
#define SWIG_OpenStudio__Measure_WRAP_H_

namespace Swig {
  class Director;
}


class SwigDirector_OSRunner : public openstudio::measure::OSRunner, public Swig::Director {

public:
    SwigDirector_OSRunner(VALUE self,openstudio::WorkflowJSON const &workflow);
    virtual ~SwigDirector_OSRunner();
    virtual bool inSelection(openstudio::model::ModelObject const &modelObject) const;
    virtual std::map< std::string,openstudio::measure::OSArgument,std::less< std::string >,std::allocator< std::pair< std::string const,openstudio::measure::OSArgument > > > getUserInput(std::vector< openstudio::measure::OSArgument,std::allocator< openstudio::measure::OSArgument > > &arguments) const;
    virtual void prepareForMeasureRun(openstudio::measure::OSMeasure const &measure);
    virtual void registerError(std::string const &message);
    virtual bool registerWarning(std::string const &message);
    virtual bool registerInfo(std::string const &message);
    virtual void registerAsNotApplicable(std::string const &message);
    virtual void registerInitialCondition(std::string const &message);
    virtual void registerFinalCondition(std::string const &message);
    virtual void registerValue(std::string const &name,bool value);
    virtual void registerValue(std::string const &name,std::string const &displayName,bool value);
    virtual void registerValue(std::string const &name,double value);
    virtual void registerValue(std::string const &name,double value,std::string const &units);
    virtual void registerValue(std::string const &name,std::string const &displayName,double value);
    virtual void registerValue(std::string const &name,std::string const &displayName,double value,std::string const &units);
    virtual void registerValue(std::string const &name,int value);
    virtual void registerValue(std::string const &name,int value,std::string const &units);
    virtual void registerValue(std::string const &name,std::string const &displayName,int value);
    virtual void registerValue(std::string const &name,std::string const &displayName,int value,std::string const &units);
    virtual void registerValue(std::string const &name,std::string const &value);
    virtual void registerValue(std::string const &name,std::string const &displayName,std::string const &value);
    virtual void haltWorkflow(std::string const &completedStatus="Invalid");
    virtual void createProgressBar(std::string const &text) const;
    virtual void updateProgress(double value) const;
    virtual void destroyProgressBar() const;
};


class SwigDirector_OSMeasure : public openstudio::measure::OSMeasure, public Swig::Director {

public:
    SwigDirector_OSMeasure(VALUE self);
    virtual ~SwigDirector_OSMeasure();
    virtual std::string name() const;
    virtual std::string description() const;
    virtual std::string taxonomy() const;
    virtual std::string modeler_description() const;
    virtual bool registerWithSketchUp() const;
    virtual bool registerWithApplication() const;
};


class SwigDirector_ModelMeasure : public openstudio::measure::ModelMeasure, public Swig::Director {

public:
    SwigDirector_ModelMeasure(VALUE self);
    virtual ~SwigDirector_ModelMeasure();
    virtual std::string name() const;
    virtual std::string description() const;
    virtual std::string taxonomy() const;
    virtual std::string modeler_description() const;
    virtual bool registerWithSketchUp() const;
    virtual bool registerWithApplication() const;
    virtual std::vector< openstudio::measure::OSArgument,std::allocator< openstudio::measure::OSArgument > > arguments(openstudio::model::Model const &model) const;
    virtual std::vector< openstudio::measure::OSOutput,std::allocator< openstudio::measure::OSOutput > > outputs() const;
    virtual bool run(openstudio::model::Model &model,openstudio::measure::OSRunner &runner,std::map< std::string,openstudio::measure::OSArgument,std::less< std::string >,std::allocator< std::pair< std::string const,openstudio::measure::OSArgument > > > const &user_arguments) const;
};


class SwigDirector_EnergyPlusMeasure : public openstudio::measure::EnergyPlusMeasure, public Swig::Director {

public:
    SwigDirector_EnergyPlusMeasure(VALUE self);
    virtual ~SwigDirector_EnergyPlusMeasure();
    virtual std::string name() const;
    virtual std::string description() const;
    virtual std::string taxonomy() const;
    virtual std::string modeler_description() const;
    virtual bool registerWithSketchUp() const;
    virtual bool registerWithApplication() const;
    virtual std::vector< openstudio::measure::OSArgument,std::allocator< openstudio::measure::OSArgument > > arguments(openstudio::Workspace const &workspace) const;
    virtual std::vector< openstudio::measure::OSOutput,std::allocator< openstudio::measure::OSOutput > > outputs() const;
    virtual bool run(openstudio::Workspace &workspace,openstudio::measure::OSRunner &runner,std::map< std::string,openstudio::measure::OSArgument,std::less< std::string >,std::allocator< std::pair< std::string const,openstudio::measure::OSArgument > > > const &user_arguments) const;
};


class SwigDirector_ReportingMeasure : public openstudio::measure::ReportingMeasure, public Swig::Director {

public:
    SwigDirector_ReportingMeasure(VALUE self);
    virtual ~SwigDirector_ReportingMeasure();
    virtual std::string name() const;
    virtual std::string description() const;
    virtual std::string taxonomy() const;
    virtual std::string modeler_description() const;
    virtual bool registerWithSketchUp() const;
    virtual bool registerWithApplication() const;
    virtual std::vector< openstudio::measure::OSArgument,std::allocator< openstudio::measure::OSArgument > > arguments(openstudio::model::Model const &model) const;
    virtual std::vector< openstudio::measure::OSOutput,std::allocator< openstudio::measure::OSOutput > > outputs() const;
    virtual bool run(openstudio::measure::OSRunner &runner,std::map< std::string,openstudio::measure::OSArgument,std::less< std::string >,std::allocator< std::pair< std::string const,openstudio::measure::OSArgument > > > const &user_arguments) const;
    virtual std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > > energyPlusOutputRequests(openstudio::measure::OSRunner &runner,std::map< std::string,openstudio::measure::OSArgument,std::less< std::string >,std::allocator< std::pair< std::string const,openstudio::measure::OSArgument > > > const &user_arguments) const;
};


#endif
