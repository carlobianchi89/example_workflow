/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_openstudioutilitiesidf_WRAP_H_
#define SWIG_openstudioutilitiesidf_WRAP_H_

#include <map>
#include <string>


class SwigDirector_Workspace : public openstudio::Workspace, public Swig::Director {

public:
    SwigDirector_Workspace(PyObject *self);
    SwigDirector_Workspace(PyObject *self,openstudio::StrictnessLevel level);
    SwigDirector_Workspace(PyObject *self,openstudio::StrictnessLevel level,openstudio::IddFileType iddFileType);
    SwigDirector_Workspace(PyObject *self,openstudio::IdfFile const &idfFile,openstudio::StrictnessLevel level=openstudio::StrictnessLevel::Minimal);
    SwigDirector_Workspace(PyObject *self,openstudio::Workspace const &other);
    SwigDirector_Workspace(PyObject *self,std::shared_ptr< openstudio::detail::Workspace_Impl > impl);
    virtual ~SwigDirector_Workspace();
    virtual void addVersionObject();
    virtual void addVersionObjectSwigPublic() {
      openstudio::Workspace::addVersionObject();
    }

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class Workspace doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[1];
#endif

};


class SwigDirector_IdfObjectWatcher : public openstudio::IdfObjectWatcher, public Swig::Director {

public:
    SwigDirector_IdfObjectWatcher(PyObject *self,openstudio::IdfObject const &idfObject);
    virtual ~SwigDirector_IdfObjectWatcher();
    virtual void clearState();
    virtual void onChangeIdfObject();
    virtual void onDataFieldChange();
    virtual void onNameChange();
    virtual void onBecomeDirty();
    virtual void onBecomeClean();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class IdfObjectWatcher doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[6];
#endif

};


class SwigDirector_WorkspaceObjectWatcher : public openstudio::WorkspaceObjectWatcher, public Swig::Director {

public:
    SwigDirector_WorkspaceObjectWatcher(PyObject *self,openstudio::WorkspaceObject const &workspaceObject);
    virtual ~SwigDirector_WorkspaceObjectWatcher();
    virtual void clearState();
    virtual void onChangeIdfObject();
    virtual void onDataFieldChange();
    virtual void onNameChange();
    virtual void onBecomeDirty();
    virtual void onBecomeClean();
    virtual void onRelationshipChange(int index,openstudio::Handle newHandle,openstudio::Handle oldHandle);
    virtual void onRemoveFromWorkspace(openstudio::Handle handle);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class WorkspaceObjectWatcher doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[8];
#endif

};


class SwigDirector_WorkspaceWatcher : public openstudio::WorkspaceWatcher, public Swig::Director {

public:
    SwigDirector_WorkspaceWatcher(PyObject *self,openstudio::Workspace const &workspace);
    virtual ~SwigDirector_WorkspaceWatcher();
    virtual void clearState();
    virtual void onChangeWorkspace();
    virtual void onBecomeDirty();
    virtual void onBecomeClean();
    virtual void onObjectAdd(openstudio::WorkspaceObject const &addedObject);
    virtual void onObjectRemove(openstudio::WorkspaceObject const &removedObject);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class WorkspaceWatcher doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[6];
#endif

};


#endif
